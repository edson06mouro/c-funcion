<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastro de Funcionários</title>
    <!-- Chosen Palette: Indigo-Blue Gradient with Neutrals -->
    <!-- Application Structure Plan: The application is structured as a single-page dashboard. It features a prominent header, a form for adding/editing employees, and a dynamic grid display for registered employees with their QR codes. This structure was chosen for its simplicity and directness, allowing users to quickly manage employee records and view/generate QR codes without navigating through multiple pages. The form is at the top for immediate action, and the list below provides real-time updates. Edit functionality is integrated by populating the form with existing data and changing the action button. Deletion is handled via a button on each card with confirmation. A custom modal popup is implemented for user feedback and error messages, including data duplication, and now supports confirmation dialogs for critical actions. -->
    <!-- Visualization & Content Choices: The core content is textual employee data and generated QR codes. The goal is to inform, organize, and allow management. Employee data is presented in cards (HTML/CSS/Tailwind) for clear organization, now including status. QR codes are generated using Canvas (qrious.js) to provide scannable identifiers (URLs). Interaction is through form submission (JS event listener) to add/update data, a 'CEP lookup' (JS fetch API), 'Edit' buttons (JS event listener) on cards to modify records, and 'Delete' buttons (JS event listener) for removal with confirmation. A custom modal (HTML/CSS/JS) provides non-blocking feedback and confirmation dialogs. The list updates dynamically (JS DOM manipulation based on LocalStorage changes). This approach avoids SVG for graphics and focuses on direct data presentation and functional interaction. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        canvas {
            display: block;
        }
        /* Estilos para o modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-xl */
            max-width: 90%;
            width: 400px;
            text-align: center;
        }
        .modal-message {
            margin-bottom: 1.5rem;
            font-size: 1.125rem; /* text-lg */
            color: #374151; /* text-gray-700 */
        }
        .modal-button {
            background-color: #4F46E5; /* indigo-600 */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem; /* rounded-lg */
            font-weight: 600; /* font-semibold */
            transition: background-color 0.3s ease;
        }
        .modal-button:hover {
            background-color: #4338CA; /* indigo-700 */
        }
        .modal-button-cancel {
            background-color: #6B7280; /* gray-500 */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem; /* rounded-lg */
            font-weight: 600; /* font-semibold */
            transition: background-color 0.3s ease;
        }
        .modal-button-cancel:hover {
            background-color: #4B5563; /* gray-600 */
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 flex flex-col items-center">

    <div class="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-6 md:p-8 mb-8">
        <h1 class="text-3xl md:text-4xl font-extrabold text-center text-indigo-700 mb-6">
            Cadastro de Funcionários 
        </h1>

        <!-- Exibe o ID do usuário (agora local) -->
        <p class="text-center text-sm text-gray-600 mb-4">
            Seu ID de Usuário Local: <span id="userIdDisplay" class="font-mono bg-gray-100 px-2 py-1 rounded-md text-gray-800 break-all">Carregando...</span>
        </p>

        <!-- Formulário de Cadastro/Edição -->
        <div class="mb-8 p-6 bg-blue-50 rounded-xl shadow-inner">
            <h2 id="formTitle" class="text-2xl font-bold text-indigo-600 mb-4">Registrar Novo Funcionário</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <input
                    type="text"
                    id="employeeName"
                    placeholder="Nome do Funcionário"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <input
                    type="text"
                    id="employeeId"
                    placeholder="ID do Funcionário"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <input
                    type="text"
                    id="department"
                    placeholder="Departamento"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <input
                    type="text"
                    id="companyWorksFor"
                    placeholder="Empresa prestadora"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <input
                    type="text"
                    id="serviceCompany"
                    placeholder="Empresa a que presta serviço"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <select
                    id="status"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                >
                    <option value="Ativo">Ativo</option>
                    <option value="Inativo">Inativo</option>
                </select>
                <input
                    type="url"
                    id="badgeLink"
                    placeholder="Link do Perfil/Crachá (URL)"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <input
                    type="text"
                    id="cep"
                    placeholder="CEP (apenas números)"
                    maxlength="8"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <input
                    type="text"
                    id="logradouro"
                    placeholder="Logradouro"
                    readonly
                    class="p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed"
                />
                <input
                    type="text"
                    id="numero"
                    placeholder="Número"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
                <input
                    type="text"
                    id="bairro"
                    placeholder="Bairro"
                    readonly
                    class="p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed"
                />
                <input
                    type="text"
                    id="cidade"
                    placeholder="Cidade"
                    readonly
                    class="p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed"
                />
                <input
                    type="text"
                    id="estado"
                    placeholder="Estado (UF)"
                    readonly
                    class="p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed"
                />
                <input
                    type="text"
                    id="complemento"
                    placeholder="Complemento (opcional)"
                    class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition duration-200"
                />
            </div>
            <button
                id="saveEmployeeButton"
                class="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition duration-300 ease-in-out transform hover:scale-105 shadow-md"
            >
                Adicionar Funcionário
            </button>
            <button
                id="cancelEditButton"
                class="w-full bg-gray-400 text-white py-3 rounded-lg font-semibold hover:bg-gray-500 transition duration-300 ease-in-out transform hover:scale-105 shadow-md mt-2 hidden"
            >
                Cancelar Edição
            </button>
        </div>

        <!-- Lista de Funcionários -->
        <h2 class="text-2xl font-bold text-indigo-600 mb-4">Funcionários Registrados</h2>
        <div id="employeesList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <p class="text-center text-gray-500 col-span-full" id="noEmployeesMessage">Nenhum funcionário registrado ainda.</p>
            <!-- Employees will be rendered here by JavaScript -->
        </div>
    </div>

    <!-- Modal Popup -->
    <div id="customModal" class="modal-overlay hidden">
        <div class="modal-content">
            <p id="modalMessage" class="modal-message"></p>
            <div class="flex justify-center gap-4">
                <button id="modalConfirmButton" class="modal-button hidden">Confirmar</button>
                <button id="modalCancelButton" class="modal-button-cancel hidden">Cancelar</button>
                <button id="modalOkButton" class="modal-button">OK</button>
            </div>
        </div>
    </div>

    <script type="module">
        let currentUserId = null;
        let employeesData = [];
        let editingEmployeeId = null;

        const employeeNameInput = document.getElementById('employeeName');
        const employeeIdInput = document.getElementById('employeeId');
        const departmentInput = document.getElementById('department');
        const companyWorksForInput = document.getElementById('companyWorksFor');
        const serviceCompanyInput = document.getElementById('serviceCompany');
        const statusSelect = document.getElementById('status');
        const badgeLinkInput = document.getElementById('badgeLink');
        const cepInput = document.getElementById('cep');
        const logradouroInput = document.getElementById('logradouro');
        const numeroInput = document.getElementById('numero');
        const bairroInput = document.getElementById('bairro');
        const cidadeInput = document.getElementById('cidade');
        const estadoInput = document.getElementById('estado');
        const complementoInput = document.getElementById('complemento');
        const saveEmployeeButton = document.getElementById('saveEmployeeButton');
        const cancelEditButton = document.getElementById('cancelEditButton');
        const employeesListDiv = document.getElementById('employeesList');
        const noEmployeesMessage = document.getElementById('noEmployeesMessage');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const formTitle = document.getElementById('formTitle');

        const customModal = document.getElementById('customModal');
        const modalMessage = document.getElementById('modalMessage');
        const modalOkButton = document.getElementById('modalOkButton');
        const modalConfirmButton = document.getElementById('modalConfirmButton');
        const modalCancelButton = document.getElementById('modalCancelButton');

        // Função para exibir o modal personalizado com opções de confirmação
        function showModal(message, onConfirm = null, onCancel = null) {
            modalMessage.textContent = message;
            customModal.classList.remove('hidden');

            // Limpa listeners anteriores
            modalOkButton.onclick = null;
            modalConfirmButton.onclick = null;
            modalCancelButton.onclick = null;

            if (onConfirm) {
                // Modo de confirmação
                modalOkButton.classList.add('hidden');
                modalConfirmButton.classList.remove('hidden');
                modalCancelButton.classList.remove('hidden');

                modalConfirmButton.onclick = () => {
                    hideModal();
                    onConfirm();
                };
                modalCancelButton.onclick = () => {
                    hideModal();
                    if (onCancel) onCancel();
                };
            } else {
                // Modo de apenas OK (informação)
                modalOkButton.classList.remove('hidden');
                modalConfirmButton.classList.add('hidden');
                modalCancelButton.classList.add('hidden');

                modalOkButton.onclick = () => {
                    hideModal();
                    if (onCancel) onCancel();
                };
            }
        }

        // Função para esconder o modal personalizado
        function hideModal() {
            customModal.classList.add('hidden');
        }

        const initApp = () => {
            currentUserId = localStorage.getItem('localUserId');
            if (!currentUserId) {
                currentUserId = crypto.randomUUID();
                localStorage.setItem('localUserId', currentUserId);
            }
            userIdDisplay.textContent = currentUserId;
            loadEmployeesFromLocalStorage();
        };

        const loadEmployeesFromLocalStorage = () => {
            const storedData = localStorage.getItem(`employeesData_${currentUserId}`);
            if (storedData) {
                try {
                    employeesData = JSON.parse(storedData);
                    employeesData.forEach(emp => {
                        if (typeof emp.timestamp === 'string') {
                            emp.timestamp = new Date(emp.timestamp);
                        }
                    });
                } catch (e) {
                    console.error("Erro ao analisar dados do localStorage:", e);
                    employeesData = [];
                }
            } else {
                employeesData = [];
            }
            employeesData.sort((a, b) => a.employeeName.localeCompare(b.employeeName));
            renderEmployees();
        };

        const clearFormFields = () => {
            employeeNameInput.value = '';
            employeeIdInput.value = '';
            departmentInput.value = '';
            companyWorksForInput.value = '';
            serviceCompanyInput.value = '';
            statusSelect.value = 'Ativo';
            badgeLinkInput.value = '';
            cepInput.value = '';
            numeroInput.value = '';
            clearAddressFields();
            complementoInput.value = '';
            employeeIdInput.readOnly = false;
        };

        const clearAddressFields = () => {
            logradouroInput.value = '';
            bairroInput.value = '';
            cidadeInput.value = '';
            estadoInput.value = '';
            complementoInput.value = '';
        };

        const fillAddressFields = (data) => {
            logradouroInput.value = data.logradouro || '';
            bairroInput.value = data.bairro || '';
            cidadeInput.value = data.localidade || '';
            estadoInput.value = data.uf || '';
        };

        const searchCep = async () => {
            let cep = cepInput.value.replace(/\D/g, '');
            if (cep.length !== 8) {
                clearAddressFields();
                return;
            }

            try {
                const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
                const data = await response.json();

                if (data.erro) {
                    showModal("CEP não encontrado.");
                    clearAddressFields();
                } else {
                    fillAddressFields(data);
                }
            } catch (error) {
                console.error("Erro ao consultar CEP:", error);
                showModal("Erro ao consultar CEP. Tente novamente mais tarde.");
                clearAddressFields();
            }
        };

        const performSaveEmployee = () => {
            const employeeName = employeeNameInput.value.trim();
            const employeeId = employeeIdInput.value.trim();
            const department = departmentInput.value.trim();
            const companyWorksFor = companyWorksForInput.value.trim();
            const serviceCompany = serviceCompanyInput.value.trim();
            const status = statusSelect.value;
            const badgeLink = badgeLinkInput.value.trim();
            const cep = cepInput.value.trim();
            const logradouro = logradouroInput.value.trim();
            const numero = numeroInput.value.trim();
            const bairro = bairroInput.value.trim();
            const cidade = cidadeInput.value.trim();
            const estado = estadoInput.value.trim();
            const complemento = complementoInput.value.trim();

            if (!employeeName || !employeeId || !department || !companyWorksFor || !serviceCompany || !cep || !logradouro || !numero || !bairro || !cidade || !estado) {
                showModal("Por favor, preencha todos os campos obrigatórios (incluindo as informações da empresa e o endereço completo).");
                return;
            }

            const employeeData = {
                employeeName,
                employeeId,
                department,
                companyWorksFor,
                serviceCompany,
                status,
                badgeLink,
                address: {
                    cep,
                    logradouro,
                    numero,
                    bairro,
                    cidade,
                    estado,
                    complemento
                },
                timestamp: new Date().toISOString()
            };

            if (editingEmployeeId) {
                const index = employeesData.findIndex(emp => emp.id === editingEmployeeId);
                if (index !== -1) {
                    employeesData[index] = { ...employeesData[index], ...employeeData };
                    showModal("Funcionário atualizado com sucesso!");
                }
            } else {
                if (employeesData.some(emp => emp.employeeId === employeeId)) {
                    showModal("Erro: Já existe um funcionário com este ID. Por favor, use um ID único.");
                    return;
                }
                employeeData.id = crypto.randomUUID();
                employeesData.push(employeeData);
                showModal("Funcionário adicionado com sucesso!");
            }

            localStorage.setItem(`employeesData_${currentUserId}`, JSON.stringify(employeesData));
            cancelEdit();
            renderEmployees();
        };

        const saveEmployee = () => {
            if (editingEmployeeId) {
                showModal("Deseja realmente salvar as alterações para este funcionário?", performSaveEmployee);
            } else {
                performSaveEmployee(); // Para adicionar, não pedimos confirmação prévia
            }
        };

        const editEmployee = (id) => {
            const employee = employeesData.find(emp => emp.id === id);
            if (employee) {
                employeeNameInput.value = employee.employeeName;
                employeeIdInput.value = employee.employeeId;
                employeeIdInput.readOnly = true;
                departmentInput.value = employee.department;
                companyWorksForInput.value = employee.companyWorksFor;
                serviceCompanyInput.value = employee.serviceCompany;
                statusSelect.value = employee.status || 'Ativo';
                badgeLinkInput.value = employee.badgeLink;
                cepInput.value = employee.address.cep;
                logradouroInput.value = employee.address.logradouro;
                numeroInput.value = employee.address.numero;
                bairroInput.value = employee.address.bairro;
                cidadeInput.value = employee.address.cidade; // Mantido como .cidade, se a API retornar localidade, ele será preenchido
                estadoInput.value = employee.address.estado; // Mantido como .estado, se a API retornar uf, ele será preenchido
                complementoInput.value = employee.address.complemento;

                formTitle.textContent = "Editar Funcionário";
                saveEmployeeButton.textContent = "Salvar Edição";
                cancelEditButton.classList.remove('hidden');
                editingEmployeeId = id;
            }
        };

        const performDeleteEmployee = (id) => {
            employeesData = employeesData.filter(emp => emp.id !== id);
            localStorage.setItem(`employeesData_${currentUserId}`, JSON.stringify(employeesData));
            showModal("Funcionário deletado com sucesso!");
            renderEmployees();
            if (editingEmployeeId === id) {
                cancelEdit();
            }
        };

        const deleteEmployee = (id) => {
            const employeeToDelete = employeesData.find(emp => emp.id === id);
            if (!employeeToDelete) return;

            showModal(
                `Tem certeza que deseja deletar o funcionário ${employeeToDelete.employeeName} (ID: ${employeeToDelete.employeeId})?`,
                () => performDeleteEmployee(id), // Callback de confirmação
                () => showModal("Exclusão cancelada.") // Callback de cancelamento
            );
        };

        const cancelEdit = () => {
            clearFormFields();
            formTitle.textContent = "Registrar Novo Funcionário";
            saveEmployeeButton.textContent = "Adicionar Funcionário";
            cancelEditButton.classList.add('hidden');
            editingEmployeeId = null;
        };

        const renderEmployees = () => {
            employeesListDiv.innerHTML = '';

            if (employeesData.length === 0) {
                noEmployeesMessage.style.display = 'block';
                employeesListDiv.appendChild(noEmployeesMessage);
            } else {
                noEmployeesMessage.style.display = 'none';
                employeesData.forEach(employee => {
                    const employeeCard = document.createElement('div');
                    employeeCard.className = "bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col items-center text-center";
                    employeeCard.innerHTML = `
                        <h3 class="text-xl font-bold text-gray-800 mb-2">${employee.employeeName}</h3>
                        <p class="text-gray-600 mb-1">ID: <span class="font-semibold">${employee.employeeId}</span></p>
                        <p class="text-gray-600 mb-4">Departamento: <span class="font-semibold">${employee.department}</span></p>
                        <p class="text-gray-600 mb-4">Status: <span class="font-semibold ${employee.status === 'Ativo' ? 'text-green-600' : 'text-red-600'}">${employee.status || 'Ativo'}</span></p>
                        <div class="text-sm text-gray-700 mb-4">
                            <p><strong>Empresa:</strong> ${employee.companyWorksFor}</p>
                            <p><strong>Presta Serviço:</strong> ${employee.serviceCompany}</p>
                            ${employee.badgeLink ? `<p><strong>Link:</strong> <a href="${employee.badgeLink}" target="_blank" class="text-blue-600 hover:underline break-all">${employee.badgeLink}</a></p>` : ''}
                            <p><strong>Endereço:</strong></p>
                            <p>${employee.address.logradouro}, ${employee.address.numero}</p>
                            ${employee.address.complemento ? `<p>Compl.: ${employee.address.complemento}</p>` : ''}
                            <p>${employee.address.bairro}</p>
                            <p>${employee.address.cidade} - ${employee.address.estado}, CEP: ${employee.address.cep}</p>
                        </div>
                        <div class="p-2 bg-white rounded-lg shadow-inner border border-gray-100">
                            <canvas id="qrcode-canvas-${employee.id}" class="w-32 h-32"></canvas>
                        </div>
                        <p class="mt-3 text-sm text-gray-500">
                            Data de Registro: ${new Date(employee.timestamp).toLocaleDateString()}
                        </p>
                        <div class="flex flex-col sm:flex-row gap-2 mt-4 w-full">
                            <button data-id="${employee.id}" class="edit-btn flex-1 bg-blue-500 text-white py-2 px-4 rounded-lg font-semibold hover:bg-blue-600 transition duration-300 ease-in-out">
                                Editar
                            </button>
                            <button data-id="${employee.id}" class="delete-btn flex-1 bg-red-500 text-white py-2 px-4 rounded-lg font-semibold hover:bg-red-600 transition duration-300 ease-in-out">
                                Deletar
                            </button>
                        </div>
                    `;
                    employeesListDiv.appendChild(employeeCard);
                    generateQrCode(employee);
                });

                // Re-anexa os listeners após a renderização dos novos elementos
                document.querySelectorAll('.edit-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        editEmployee(event.target.dataset.id);
                    });
                });
                document.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        deleteEmployee(event.target.dataset.id);
                    });
                });
            }
        };

        const generateQrCode = (employee) => {
            const canvasId = `qrcode-canvas-${employee.id}`;
            const canvasElement = document.getElementById(canvasId);

            if (canvasElement) {
                const context = canvasElement.getContext('2d');
                context.clearRect(0, 0, canvasElement.width, canvasElement.height);

                if (typeof QRious !== 'undefined') {
                    const qrValue = employee.badgeLink.trim();

                    if (qrValue) {
                        try {
                            new QRious({
                                element: canvasElement,
                                value: qrValue,
                                size: 128,
                                level: 'H'
                            });
                        } catch (e) {
                            context.font = "10px Arial";
                            context.fillStyle = "#FF0000";
                            context.textAlign = "center";
                            context.fillText("Erro QR: Link inválido", canvasElement.width / 2, canvasElement.height / 2 - 5);
                            context.fillText("ID: " + employee.employeeId, canvasElement.width / 2, canvasElement.height / 2 + 10);
                            console.error("Erro ao gerar QR Code (link inválido/longo):", e);
                            showModal("Não foi possível gerar o QR Code para o funcionário " + employee.employeeName + " (ID: " + employee.employeeId + "). O link fornecido pode ser inválido ou muito longo. Verifique o console para mais detalhes.");
                        }
                    } else {
                        context.font = "10px Arial";
                        context.fillStyle = "#6B7280";
                        context.textAlign = "center";
                        context.fillText("Link não definido", canvasElement.width / 2, canvasElement.height / 2 - 5);
                        context.fillText("para o QR", canvasElement.width / 2, canvasElement.height / 2 + 10);
                    }
                } else {
                    context.font = "10px Arial";
                    context.fillStyle = "#FF0000";
                    context.textAlign = "center";
                    context.fillText("QR indisponível", canvasElement.width / 2, canvasElement.height / 2 - 5);
                    context.fillText("Recarregue a página", canvasElement.width / 2, canvasElement.height / 2 + 10);
                    console.error("A biblioteca QRious não está carregada. Verifique sua conexão ou extensões.");
                }
            } else {
                console.warn(`Canvas element with ID ${canvasId} not found.`);
            }
        };

        cepInput.addEventListener('blur', searchCep);
        cepInput.addEventListener('input', () => {
            if (cepInput.value.replace(/\D/g, '').length < 8) {
                clearAddressFields();
            }
        });

        saveEmployeeButton.addEventListener('click', saveEmployee);
        cancelEditButton.addEventListener('click', cancelEdit);
        // O modalOkButton agora é gerenciado dinamicamente pela função showModal
        // modalOkButton.addEventListener('click', hideModal); // Removido para gerenciamento dinâmico

        window.onload = initApp;
    </script>
</body>
</html>
